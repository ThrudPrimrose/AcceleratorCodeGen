
#include "common.h"

#include "kernel_operator.h"

namespace dace
{
    using float16 = half;
}

struct ascendc_test_3_state_t
{
    dace::ascendc::Context *acl_context;
};

extern "C" __global__ __aicore__ void copy_map_outer_0_0_6(GM_ADDR ascend_A, GM_ADDR ascend_B, GM_ADDR ascend_C) {
    // Initialization of Global Storage
    __gm__ dace::float16* ascend_C_typed = reinterpret_cast<__gm__ dace::float16*>(ascend_C);
    __gm__ dace::float16* ascend_A_typed = reinterpret_cast<__gm__ dace::float16*>(ascend_A);
    __gm__ dace::float16* ascend_B_typed = reinterpret_cast<__gm__ dace::float16*>(ascend_B);

    // Initialization of Pipe and Queues
    AscendC::TPipe pipe;
    AscendC::TQue<AscendC::QuePosition::VECIN, 1> inQueue_frag_A;
    AscendC::TQue<AscendC::QuePosition::VECIN, 1> inQueue_frag_B;
    AscendC::TQue<AscendC::QuePosition::VECOUT, 1> outQueue_frag_C;
    pipe.InitBuffer(inQueue_frag_B, 1, 256 * sizeof(dace::float16));
    pipe.InitBuffer(inQueue_frag_A, 1, 256 * sizeof(dace::float16));
    pipe.InitBuffer(outQueue_frag_C, 1, 256 * sizeof(dace::float16));

    {
        // Ascend Device Map
        for (long long i = 0; i < 8192; i += 1)
        {
            AscendC::GlobalTensor<dace::float16> ascend_C_GM;
            AscendC::GlobalTensor<dace::float16> ascend_A_GM;
            AscendC::GlobalTensor<dace::float16> ascend_B_GM;
            for (long long j = 0; j < 8192; j += 8192)
            {
                {
                    {
                        {
                            // Declare frag_A
                            AscendC::LocalTensor<dace::float16> frag_A;
                            // Declare frag_B
                            AscendC::LocalTensor<dace::float16> frag_B;
                            // Declare frag_C
                            AscendC::LocalTensor<dace::float16> frag_C;
                            // AiCore Group Map
                            int jj = (256 * AscendC::GetBlockIdx());
                            // AiCore Group Map
                            constexpr int ii = 0;
                            {
                                if (ii < 8192) {
                                    // Global -> VECIN: Alloc Local, DataCopy, EnQue
                                    frag_A = inQueue_frag_A.AllocTensor<dace::float16>();
                                    ascend_A_GM.SetGlobalBuffer(&ascend_A_typed[8192*i + j + jj], 256);
                                    DataCopy(frag_A, ascend_A_GM, 256);
                                    inQueue_frag_A.EnQue(frag_A);
                                    // Global -> VECIN: Alloc Local, DataCopy, EnQue
                                    frag_B = inQueue_frag_B.AllocTensor<dace::float16>();
                                    ascend_B_GM.SetGlobalBuffer(&ascend_B_typed[8192*i + j + jj], 256);
                                    DataCopy(frag_B, ascend_B_GM, 256);
                                    inQueue_frag_B.EnQue(frag_B);
                                    frag_A = inQueue_frag_A.DeQue<dace::float16>();
                                    frag_B = inQueue_frag_B.DeQue<dace::float16>();
                                    frag_C = outQueue_frag_C.AllocTensor<dace::float16>();
                                    {
                                        AscendC::LocalTensor<dace::float16>& IN_frag_A = frag_A; // Type wrapped 1
                                        AscendC::LocalTensor<dace::float16>& IN_frag_B = frag_B; // Type wrapped 1
                                        AscendC::LocalTensor<dace::float16>& OUT_frag_C = frag_C; // Type wrapped 2

                                        ///////////////////
                                        // Tasklet code (Add)
                                        Add(OUT_frag_C, IN_frag_A, IN_frag_B, 256);
                                        ///////////////////

                                    }
                                    inQueue_frag_A.FreeTensor(frag_A);
                                    inQueue_frag_B.FreeTensor(frag_B);
                                    outQueue_frag_C.EnQue<dace::float16>(frag_C);
                                    // VECOUT -> Global: DeQue, DataCopy, Free Prev.
                                    frag_C = outQueue_frag_C.DeQue<dace::float16>();
                                    ascend_C_GM.SetGlobalBuffer(&ascend_C_typed[8192*i + j + jj], 256);
                                    DataCopy(ascend_C_GM, frag_C, 256);
                                    outQueue_frag_C.FreeTensor(frag_C);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


extern "C" void __dace_run_runkernel_copy_map_outer_0_0_6(ascendc_test_3_state_t *__state, uint8_t* ascend_A, uint8_t* ascend_B, uint8_t* ascend_C)
{

    copy_map_outer_0_0_6<<<32, nullptr, nullptr>>>(reinterpret_cast<GM_ADDR>(ascend_A), reinterpret_cast<GM_ADDR>(ascend_B), reinterpret_cast<GM_ADDR>(ascend_C));

    DACE_ACL_CHECK(aclrtSynchronizeDevice());

}
